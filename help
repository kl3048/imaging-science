% hand coded Guass Newton solver
convergence = 1.0;
tolerance = 7.e-2;                                                                                    
x = InitialGuess;
while (convergence > tolerance)
  % update solution
r = y - x(1)*exp(x(2)*t.^2 + x(3)*t);
J1 = -exp(x(2)*t.^2 + x(3)*t);
J2 = -exp(x(2)*t.^2+x(3)*t)*x(1).*t.^2;
J3 = -exp(x(2)*t.^2+x(3)*t)*x(1).*t;
J = [J1 J2 J3];
[Q R] = qr(J);
s = -R\(Q'*r)  
x = x + s
convergence = (1/2)*(transpose(r)).*r
%convergence =0;
end


myShortAnswer3 = 'What algorithm did you use ? What properties led to your algorithm selection ? Gauss Newton/Quasi Newton. The Gauss-Newton Method approximates the Hessian with first derivative information and saves implementation time per the notes. Approximating the hessian by dropping the second order term renders it a Quasi Newton'; 

myShortAnswer4 = "What is your convergence rate ? How does it compare to lsqnonlin?"
function [residual,jacobian]= pharmacokinetics(x1)
y = [3; 2.7; 1.3; .7; .1];
t = [0; 1; 2; 3; 4];
x1 = [1; 1; 1];
residual = y - x1(1)*exp(x1(2)*t.^2 + x1(3)*t);
J1 = -exp(x1(2)*t.^2 + x1(3)*t);
J2 = -exp(x1(2)*t.^2+x1(3)*t)*x1(1).*t.^2;
J3 = -exp(x1(2)*t.^2+x1(3)*t)*x1(1).*t;
jacobian = [J1 J2 J3];
disp (sprintf( '%f %f %f ' , x1(1) , x(2) , residual'*residual ) );
x2 = lsqnsoln(@pharmacokinetic,[1;0],-inf,inf,optimset('jacobian','on'))
disp(x2)
end
